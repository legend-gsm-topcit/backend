# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Build Spring Project

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'oracle'
    
    - name: Create application.yml
      run: |
        echo "mkdir resources"
        mkdir -p ./src/main/resources 
        touch ./src/main/resources/application.yml

        echo "now filling up the application.yml"
        echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml

        cat ./src/main/resources/application.yml

    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: clean build

    - name: Build and push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with: 
        image: oneeonly/topcit
        tags: v1, latest
        registry: docker.io
        dockerfile: DockerFile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Deploy Docker image from EC2 Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }}
        port: ${{ secrets.EC2_SSH_PORT }}
        script: |
          docker stop backend
          docker rm backend
          docker rmi oneeonly/topcit:latest
          docker pull oneeonly/topcit:latest
          docker run --network topcit_network --name backend -p 80:8080 -d oneeonly/topcit

